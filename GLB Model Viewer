import React, { useEffect, useRef } from "react";
import { addPropertyControls, ControlType } from "framer";

// CDN links
const ThreeJSURL = "https://unpkg.com/three@0.136.0/build/three.min.js";
const GLTFLoaderURL = "https://unpkg.com/three@0.136.0/examples/js/loaders/GLTFLoader.js";
const OrbitControlsURL = "https://unpkg.com/three@0.136.0/examples/js/controls/OrbitControls.js";

// Script cache to prevent duplicate loading
const scriptCache = new Map();

const loadScript = (url) => {
    if (scriptCache.has(url)) return scriptCache.get(url);
    const promise = new Promise((resolve, reject) => {
        const script = document.createElement("script");
        script.src = url;
        script.async = true;
        script.onload = () => resolve(true);
        script.onerror = () => reject(new Error(`Failed to load script: ${url}`));
        document.head.appendChild(script);
    });
    scriptCache.set(url, promise);
    return promise;
};

export default function ThreeDModel({
    glbUrl,
    cameraX = 0,
    cameraY = 0,
    cameraZ = 10,
    modelX = 0,
    modelY = 0,
    modelZ = 0,
    modelScale = 2,
    rotationSpeed = 0.01,
    rotationDirection = 1,
    ambientLightIntensity = 1,
    directionalLightIntensity = 1,
}) {
    const mountRef = useRef(null);
    const objectRef = useRef(null);
    const animationRef = useRef(null);
    const controlsRef = useRef(null);
    const userInteracting = useRef(false);
    const lastInteractionTime = useRef(Date.now());
    const mouseDownRef = useRef(false);

    useEffect(() => {
        if (!mountRef.current || !glbUrl) {
            console.error("❌ Missing mount reference or GLB URL");
            return;
        }

        const loadModules = async () => {
            try {
                console.log("🔍 Initializing Three.js Scene...");

                await loadScript(ThreeJSURL);
                const THREE = window.THREE;
                if (!THREE) throw new Error("THREE not found on window");
                console.log("✅ Three.js Loaded");

                await loadScript(GLTFLoaderURL);
                await loadScript(OrbitControlsURL);

                const OrbitControls = window.THREE.OrbitControls || window.OrbitControls;
                const GLTFLoader = window.THREE.GLTFLoader || window.GLTFLoader;

                if (!OrbitControls || !GLTFLoader) {
                    throw new Error("❌ OrbitControls or GLTFLoader not found after script load");
                }

                if (!THREE.OrbitControls) THREE.OrbitControls = OrbitControls;
                if (!THREE.GLTFLoader) THREE.GLTFLoader = GLTFLoader;

                console.log("✅ GLTFLoader and OrbitControls loaded");

                const scene = new THREE.Scene();
                scene.background = null;

                const camera = new THREE.PerspectiveCamera(
                    50,
                    mountRef.current.clientWidth / mountRef.current.clientHeight,
                    0.1,
                    1000
                );
                camera.position.set(cameraX, cameraY, cameraZ);

                const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
                renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
                renderer.setPixelRatio(window.devicePixelRatio);
                mountRef.current.appendChild(renderer.domElement);

                const controls = new THREE.OrbitControls(camera, renderer.domElement);
                controls.enableDamping = true;
                controls.enableZoom = false;
                controls.enablePan = false;
                controls.minPolarAngle = Math.PI / 2;
                controls.maxPolarAngle = Math.PI / 2;
                controlsRef.current = controls;

                controls.addEventListener("start", () => {
                    userInteracting.current = true;
                    mouseDownRef.current = true;
                });

                window.addEventListener("mouseup", () => {
                    if (mouseDownRef.current) {
                        userInteracting.current = false;
                        lastInteractionTime.current = Date.now();
                        mouseDownRef.current = false;
                    }
                });

                // Lights
                const lightGroup = new THREE.Group();

                const ambientLight = new THREE.AmbientLight(0xffffff, ambientLightIntensity);
                lightGroup.add(ambientLight);

                const dirLight = new THREE.DirectionalLight(0xffffff, directionalLightIntensity);
                dirLight.position.set(5, 10, 5);
                dirLight.target.position.set(0, 0, 0);
                lightGroup.add(dirLight);
                lightGroup.add(dirLight.target);

                const fillLight = new THREE.DirectionalLight(0xffffff, directionalLightIntensity * 0.3);
                fillLight.position.set(-5, -5, -5);
                lightGroup.add(fillLight);

                scene.add(lightGroup);

                const loader = new THREE.GLTFLoader();
                loader.load(
                    glbUrl,
                    (gltf) => {
                        const model = gltf.scene;
                        console.log("📦 Loaded Model Details:", model);
                        model.traverse((child) => console.log("🔎 Traversed Node:", child));

                        model.scale.setScalar(modelScale);
                        model.position.set(modelX, modelY, modelZ);

                        scene.add(model);
                        objectRef.current = model;

                        controls.target.copy(new THREE.Vector3(0, 0, 0));
                        camera.position.set(0, 0, 5);
                        camera.lookAt(controls.target);
                        controls.update();

                        console.log("✅ Model Loaded");
                    },
                    undefined,
                    (err) => console.error("❌ Error loading model", err)
                );

                const animate = () => {
                    animationRef.current = requestAnimationFrame(animate);

                    if (objectRef.current && rotationDirection !== 0) {
                        const elapsed = (Date.now() - lastInteractionTime.current) / 1000;
                        const easeFactor = Math.min(elapsed / 0.8, 1);
                        if (!userInteracting.current) {
                            objectRef.current.rotation.y += rotationSpeed * easeFactor * rotationDirection;
                        }
                    }

                    controls.update();
                    renderer.render(scene, camera);
                };
                animate();
            } catch (e) {
                console.error("❌ Failed to initialize Three.js scene:", e);
            }
        };

        loadModules();

        return () => {
            cancelAnimationFrame(animationRef.current);
            if (mountRef.current?.firstChild) {
                mountRef.current.removeChild(mountRef.current.firstChild);
            }
        };
    }, [glbUrl, cameraX, cameraY, cameraZ, modelX, modelY, modelZ, modelScale, rotationSpeed, rotationDirection, ambientLightIntensity, directionalLightIntensity]);

    return <div ref={mountRef} style={{ width: "100%", height: "100%", overflow: "visible" }} />;
}

addPropertyControls(ThreeDModel, {
    glbUrl: { type: ControlType.String, title: "GLB URL" },
    cameraX: { type: ControlType.Number, title: "Camera X", defaultValue: 0 },
    cameraY: { type: ControlType.Number, title: "Camera Y", defaultValue: 0 },
    cameraZ: { type: ControlType.Number, title: "Camera Z", defaultValue: 10 },
    modelX: { type: ControlType.Number, title: "Model X", defaultValue: 0 },
    modelY: { type: ControlType.Number, title: "Model Y", defaultValue: 0 },
    modelZ: { type: ControlType.Number, title: "Model Z", defaultValue: 0 },
    modelScale: { type: ControlType.Number, title: "Model Scale", defaultValue: 2 },
    rotationSpeed: { type: ControlType.Number, title: "Rotation Speed" },
    rotationDirection: {
        type: ControlType.Enum,
        title: "Rotation Direction",
        options: [1, -1, 0],
        optionTitles: ["CCW", "CW", "None"],
    },
    ambientLightIntensity: {
        type: ControlType.Number,
        title: "Ambient Light",
        defaultValue: 1,
        min: 0,
        max: 3,
        step: 0.1,
    },
    directionalLightIntensity: {
        type: ControlType.Number,
        title: "Directional Light",
        defaultValue: 1,
        min: 0,
        max: 3,
        step: 0.1,
    },
});

// 3/23 status: stable, i think we're done for now.
