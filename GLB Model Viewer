// 4/12: desktop & mobile stable

import React, { useEffect, useRef, useState } from "react";
import { addPropertyControls, ControlType } from "framer";

export default function ThreeDModel({
    glbUrl,
    cameraX = 0,
    cameraY = 0,
    cameraZ = 10,
    modelX = 0,
    modelY = 0,
    modelZ = 0,
    modelScale = 2,
    rotationSpeed = 0.01,
    rotationDirection = 1,
    ambientLightIntensity = 1,
    directionalLightIntensity = 1,
    mobileQuality = "medium" // Can be "low", "medium", or "high"
}) {
    const mountRef = useRef(null);
    const [isInitialized, setIsInitialized] = useState(false);
    const [isModelLoaded, setIsModelLoaded] = useState(false);
    const [isInViewport, setIsInViewport] = useState(false);
    const [hasError, setHasError] = useState(false);
    
    // References for cleanup
    const stateRef = useRef({
        isMounted: false,
        renderer: null,
        scene: null,
        camera: null,
        controls: null,
        model: null,
        animationFrame: null,
        isUserInteracting: false,
        lastInteractionTime: Date.now(),
        rotationVelocity: 0,
        eventListeners: []
    });
    
    // Safari reset - this is crucial for iOS Safari
    useEffect(() => {
        // Create a session ID that changes each time the page loads
        // This helps Safari recognize this is a new session
        if (typeof window !== 'undefined' && !window._glbViewerSessionId) {
            window._glbViewerSessionId = Date.now();
            
            // Force context loss on page unload to help Safari cleanup resources
            window.addEventListener('beforeunload', () => {
                if (stateRef.current.renderer) {
                    stateRef.current.renderer.forceContextLoss();
                    stateRef.current.renderer.dispose();
                }
            });
        }
    }, []);
    
    // Detect device
    const isMobile = typeof navigator !== 'undefined' && 
                    (/Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent));
    const isIOS = typeof navigator !== 'undefined' && 
                (/iPhone|iPad|iPod/i.test(navigator.userAgent) && !window.MSStream);
    
    // Get quality settings based on device and preference
    const getQualitySettings = () => {
        // Base values - adjust these for each quality level
        const settings = {
            pixelRatio: isMobile ? 1 : window.devicePixelRatio,
            antialias: !isMobile,
            precision: isMobile ? "mediump" : "highp",
            powerPreference: "default"
        };
        
        if (isMobile) {
            if (mobileQuality === "low") {
                settings.pixelRatio = Math.min(1.0, window.devicePixelRatio);
                settings.precision = "lowp";
            } else if (mobileQuality === "medium") {
                settings.pixelRatio = Math.min(1.5, window.devicePixelRatio);
                settings.precision = "mediump";
            } else { // "high"
                settings.pixelRatio = Math.min(2.0, window.devicePixelRatio);
                settings.precision = "mediump";
                settings.antialias = true;
            }
        }
        
        // Special settings for iOS
        if (isIOS) {
            settings.powerPreference = "low-power";
            settings.antialias = false;
            settings.precision = mobileQuality === "low" ? "lowp" : "mediump";
            settings.pixelRatio = mobileQuality === "low" ? 1.0 : 
                                 (mobileQuality === "medium" ? 1.2 : 1.5);
        }
        
        return settings;
    };
    
    // Intersection Observer setup
    useEffect(() => {
        const observer = new IntersectionObserver(
            (entries) => {
                const isVisible = entries[0].isIntersecting;
                setIsInViewport(isVisible);
                
                // Reset error state when coming into view
                if (isVisible && hasError) {
                    setHasError(false);
                }
                
                // Initialize only when in viewport
                if (isVisible && !isInitialized && !hasError) {
                    // Slightly delay initialization to help with iOS Safari
                    setTimeout(() => {
                        setIsInitialized(true);
                    }, 100);
                }
            },
            { threshold: 0.1, rootMargin: "50px" }
        );

        if (mountRef.current) {
            observer.observe(mountRef.current);
        }
        
        return () => {
            if (mountRef.current) {
                observer.unobserve(mountRef.current);
            }
        };
    }, [isInitialized, hasError]);

    // Load scripts utility
    const loadScript = (url) => {
        return new Promise((resolve, reject) => {
            // Check if script is already loaded
            if (document.querySelector(`script[src="${url}"]`)) {
                resolve();
                return;
            }
            
            const script = document.createElement('script');
            script.src = url;
            script.async = true;
            script.onload = () => resolve();
            script.onerror = () => reject(new Error(`Failed to load ${url}`));
            document.head.appendChild(script);
        });
    };
    
    // Load Three.js and dependencies
    const loadThree = async () => {
        try {
            await Promise.all([
                loadScript("https://unpkg.com/three@0.136.0/build/three.min.js"),
                loadScript("https://unpkg.com/three@0.136.0/examples/js/loaders/GLTFLoader.js"),
                loadScript("https://unpkg.com/three@0.136.0/examples/js/controls/OrbitControls.js")
            ]);
            
            // Connect modules if needed
            if (window.THREE && window.GLTFLoader && !window.THREE.GLTFLoader) {
                window.THREE.GLTFLoader = window.GLTFLoader;
            }
            
            if (window.THREE && window.OrbitControls && !window.THREE.OrbitControls) {
                window.THREE.OrbitControls = window.OrbitControls;
            }
            
            return window.THREE;
        } catch (err) {
            console.error("Failed to load Three.js:", err);
            setHasError(true);
            throw err;
        }
    };
    
    // Clean up all resources to prevent memory leaks
    const performCleanup = () => {
        const state = stateRef.current;
        
        // Cancel animation frame
        if (state.animationFrame) {
            cancelAnimationFrame(state.animationFrame);
            state.animationFrame = null;
        }
        
        // Remove event listeners
        state.eventListeners.forEach(({ target, event, handler, options }) => {
            if (target) {
                target.removeEventListener(event, handler, options);
            }
        });
        state.eventListeners = [];
        
        // Dispose of Three.js objects
        if (state.model) {
            if (state.scene) state.scene.remove(state.model);
            
            state.model.traverse((node) => {
                if (node.isMesh) {
                    if (node.geometry) node.geometry.dispose();
                    
                    if (node.material) {
                        if (Array.isArray(node.material)) {
                            node.material.forEach(mat => {
                                if (mat.map) mat.map.dispose();
                                mat.dispose();
                            });
                        } else {
                            if (node.material.map) node.material.map.dispose();
                            node.material.dispose();
                        }
                    }
                }
            });
            
            state.model = null;
        }
        
        // Dispose controls
        if (state.controls) {
            state.controls.dispose();
            state.controls = null;
        }
        
        // Dispose renderer - this is critical for Safari
        if (state.renderer) {
            state.renderer.dispose();
            state.renderer.forceContextLoss();
            
            // Remove from DOM
            const canvas = state.renderer.domElement;
            if (canvas && canvas.parentNode) {
                canvas.parentNode.removeChild(canvas);
            }
            
            state.renderer = null;
        }
        
        // Clear scene
        if (state.scene) {
            while(state.scene.children.length > 0) { 
                const object = state.scene.children[0];
                state.scene.remove(object);
            }
            state.scene = null;
        }
        
        state.camera = null;
    };

    // Initialize Three.js scene when component becomes visible
    useEffect(() => {
        if (!isInitialized || !isInViewport || !glbUrl || hasError) return;
        
        stateRef.current.isMounted = true;
        const state = stateRef.current;
        
        // Clear container first
        if (mountRef.current) {
            while (mountRef.current.firstChild) {
                mountRef.current.removeChild(mountRef.current.firstChild);
            }
        }

        // Helper to add event listeners that get automatically cleaned up
        const addEventListenerWithCleanup = (target, event, handler, options) => {
            if (!target) return;
            
            target.addEventListener(event, handler, options);
            state.eventListeners.push({ target, event, handler, options });
        };
        
        // Initialize Three.js scene
        const initScene = async () => {
            try {
                const THREE = await loadThree();
                if (!state.isMounted) return;
                
                // Create container element
                const container = document.createElement('div');
                container.style.width = '100%';
                container.style.height = '100%';
                container.style.position = 'relative';
                container.style.touchAction = 'pan-y';
                
                if (!mountRef.current) return;
                mountRef.current.appendChild(container);
                
                // Get quality settings
                const quality = getQualitySettings();
                
                // Create scene
                const scene = new THREE.Scene();
                scene.background = null;
                state.scene = scene;
                
                // Create camera
                const camera = new THREE.PerspectiveCamera(
                    50, 
                    container.clientWidth / container.clientHeight, 
                    0.1, 
                    1000
                );
                camera.position.set(0, 0, 5);
                state.camera = camera;
                
                // Create renderer with specific settings for platform
                const renderer = new THREE.WebGLRenderer({ 
                    alpha: true, 
                    antialias: quality.antialias,
                    precision: quality.precision,
                    powerPreference: quality.powerPreference,
                    preserveDrawingBuffer: false
                });
                
                renderer.setSize(container.clientWidth, container.clientHeight);
                renderer.setPixelRatio(quality.pixelRatio);
                
                renderer.domElement.style.position = 'absolute';
                renderer.domElement.style.top = '0';
                renderer.domElement.style.left = '0';
                renderer.domElement.style.width = '100%';
                renderer.domElement.style.height = '100%';
                
                // Touch handling setup
                if (isMobile) {
                    renderer.domElement.style.pointerEvents = 'none';
                    
                    let touchStartX = 0;
                    let touchStartY = 0;
                    let lastTouchX = 0;
                    let isHorizontalMove = null;
                    
                    const handleTouchStart = (e) => {
                        if (e.touches.length !== 1) return;
                        
                        touchStartX = e.touches[0].clientX;
                        touchStartY = e.touches[0].clientY;
                        lastTouchX = touchStartX;
                        isHorizontalMove = null;
                        state.isUserInteracting = false;
                    };
                    
                    const handleTouchMove = (e) => {
                        if (e.touches.length !== 1) return;
                        
                        const currentX = e.touches[0].clientX;
                        const currentY = e.touches[0].clientY;
                        const deltaX = Math.abs(currentX - touchStartX);
                        const deltaY = Math.abs(currentY - touchStartY);
                        
                        // Determine direction if not already set
                        if (isHorizontalMove === null && (deltaX > 8 || deltaY > 8)) {
                            isHorizontalMove = deltaX > deltaY;
                            
                            if (isHorizontalMove) {
                                // Horizontal - enable rotation
                                renderer.domElement.style.pointerEvents = 'auto';
                                
                                if (e.cancelable) {
                                    e.preventDefault();
                                }
                                
                                state.isUserInteracting = true;
                            } else {
                                // Vertical - disable pointer events to allow page scrolling
                                renderer.domElement.style.pointerEvents = 'none';
                                state.isUserInteracting = false;
                            }
                        }
                        
                        // Handle horizontal rotation
                        if (isHorizontalMove === true && state.model) {
                            state.isUserInteracting = true;
                            state.lastInteractionTime = Date.now();
                            
                            if (e.cancelable) {
                                e.preventDefault();
                            }
                            
                            // Rotate the model
                            const rotateAmount = (currentX - lastTouchX) * 0.01;
                            state.model.rotation.y += rotateAmount;
                            state.rotationVelocity = rotateAmount * 10; // Store for momentum
                            
                            lastTouchX = currentX;
                        }
                    };
                    
                    const handleTouchEnd = () => {
                        // Reset pointer events to none to allow scrolling by default
                        renderer.domElement.style.pointerEvents = 'none';
                        
                        state.isUserInteracting = false;
                        state.lastInteractionTime = Date.now();
                    };
                    
                    // Add touch event listeners
                    addEventListenerWithCleanup(container, "touchstart", handleTouchStart, { passive: true });
                    addEventListenerWithCleanup(container, "touchmove", handleTouchMove, { passive: false });
                    addEventListenerWithCleanup(container, "touchend", handleTouchEnd, { passive: true });
                } else {
                    // Desktop controls with OrbitControls
                    try {
                        const controls = new THREE.OrbitControls(camera, renderer.domElement);
                        controls.enableDamping = true;
                        controls.dampingFactor = 0.05;
                        controls.enableZoom = false;
                        controls.enablePan = false;
                        controls.minPolarAngle = Math.PI / 2;
                        controls.maxPolarAngle = Math.PI / 2;
                        controls.rotateSpeed = 0.7;
                        
                        controls.addEventListener('start', () => { 
                            state.isUserInteracting = true; 
                        });
                        
                        controls.addEventListener('end', () => { 
                            state.isUserInteracting = false; 
                            state.lastInteractionTime = Date.now();
                        });
                        
                        state.controls = controls;
                    } catch (err) {
                        console.warn("Could not initialize OrbitControls:", err);
                    }
                }
                
                container.appendChild(renderer.domElement);
                state.renderer = renderer;
                
                // Add lighting
                const ambientLight = new THREE.AmbientLight(0xffffff, ambientLightIntensity);
                const dirLight = new THREE.DirectionalLight(0xffffff, directionalLightIntensity);
                dirLight.position.set(5, 10, 5);
                const fillLight = new THREE.DirectionalLight(0xffffff, directionalLightIntensity * 0.3);
                fillLight.position.set(-5, -5, -5);
                scene.add(ambientLight, dirLight, fillLight);
                
                // Set initial rotation velocity
                state.rotationVelocity = rotationSpeed * rotationDirection;
                
                // Load model
                try {
                    const loader = new THREE.GLTFLoader();
                    
                    // Set a timeout for loading
                    const loadTimeout = setTimeout(() => {
                        if (!isModelLoaded && state.isMounted) {
                            console.warn("Model loading timeout");
                            setHasError(true);
                        }
                    }, 15000);
                    
                    loader.load(
                        glbUrl,
                        (gltf) => {
                            clearTimeout(loadTimeout);
                            if (!state.isMounted) return;
                            
                            const model = gltf.scene;
                            
                            // Apply optimizations for mobile
                            if (isMobile) {
                                model.traverse((node) => {
                                    if (node.isMesh) {
                                        node.castShadow = false;
                                        node.receiveShadow = false;
                                        
                                        if (node.material) {
                                            if (Array.isArray(node.material)) {
                                                node.material.forEach(mat => {
                                                    mat.precision = quality.precision;
                                                    // Reduce texture quality on lowest setting
                                                    if (quality.pixelRatio === 1 && mat.map) {
                                                        mat.map.minFilter = THREE.LinearFilter;
                                                        mat.map.anisotropy = 1;
                                                    }
                                                });
                                            } else {
                                                node.material.precision = quality.precision;
                                                // Reduce texture quality on lowest setting
                                                if (quality.pixelRatio === 1 && node.material.map) {
                                                    node.material.map.minFilter = THREE.LinearFilter;
                                                    node.material.map.anisotropy = 1;
                                                }
                                            }
                                        }
                                    }
                                });
                            }
                            
                            model.scale.setScalar(modelScale);
                            model.position.set(modelX, modelY, modelZ);
                            scene.add(model);
                            state.model = model;
                            
                            camera.lookAt(new THREE.Vector3(0, 0, 0));
                            setIsModelLoaded(true);
                        },
                        undefined,
                        (err) => {
                            clearTimeout(loadTimeout);
                            console.error("Error loading model:", err);
                            setHasError(true);
                        }
                    );
                } catch (err) {
                    console.error("Error setting up model loader:", err);
                    setHasError(true);
                }
                
                // Animation loop
                const animate = () => {
                    if (!state.isMounted) return;
                    
                    state.animationFrame = requestAnimationFrame(animate);
                    
                    // Update controls if available
                    if (state.controls) {
                        state.controls.update();
                    }
                    
                    // Handle model rotation
                    if (state.model && !state.isUserInteracting) {
                        const elapsed = (Date.now() - state.lastInteractionTime) / 1000;
                        
                        if (elapsed > 0.1) {
                            // Apply momentum with smooth transition to target rotation
                            const dampingFactor = 0.95;
                            const targetVelocity = rotationSpeed * rotationDirection;
                            
                            state.rotationVelocity = state.rotationVelocity * dampingFactor + 
                                                targetVelocity * (1 - dampingFactor);
                            
                            state.model.rotation.y += state.rotationVelocity;
                        }
                    }
                    
                    // Render scene
                    if (state.renderer && state.scene && state.camera) {
                        state.renderer.render(state.scene, state.camera);
                    }
                };
                
                animate();
                
                // Handle resize
                const handleResize = () => {
                    if (!container || !state.camera || !state.renderer) return;
                    
                    state.camera.aspect = container.clientWidth / container.clientHeight;
                    state.camera.updateProjectionMatrix();
                    state.renderer.setSize(container.clientWidth, container.clientHeight);
                };
                
                addEventListenerWithCleanup(window, 'resize', handleResize);
                
            } catch (err) {
                console.error("Error initializing scene:", err);
                setHasError(true);
            }
        };
        
        initScene();
        
        // Cleanup when component unmounts or when dependencies change
        return () => {
            stateRef.current.isMounted = false;
            performCleanup();
        };
    }, [isInitialized, isInViewport, glbUrl, hasError, mobileQuality, modelScale, 
        modelX, modelY, modelZ, rotationSpeed, rotationDirection, 
        ambientLightIntensity, directionalLightIntensity]);

    return (
        <div 
            ref={mountRef} 
            style={{ 
                width: "100%", 
                height: "100%", 
                overflow: "visible",
                touchAction: "pan-y",
                position: "relative"
            }}
        >
            {hasError && (
                <div 
                    style={{
                        width: '100%',
                        height: '100%',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        background: 'rgba(0,0,0,0.03)',
                        color: '#666',
                        fontSize: '14px',
                        fontFamily: 'sans-serif'
                    }}
                >
                    <div style={{ textAlign: 'center' }}>
                        <div>Model loading issue</div>
                        <div style={{ marginTop: '8px', fontSize: '12px' }}>
                            Try refreshing the page
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}

addPropertyControls(ThreeDModel, {
    glbUrl: { type: ControlType.String, title: "GLB URL" },
    cameraX: { type: ControlType.Number, title: "Camera X", defaultValue: 0 },
    cameraY: { type: ControlType.Number, title: "Camera Y", defaultValue: 0 },
    cameraZ: { type: ControlType.Number, title: "Camera Z", defaultValue: 10 },
    modelX: { type: ControlType.Number, title: "Model X", defaultValue: 0 },
    modelY: { type: ControlType.Number, title: "Model Y", defaultValue: 0 },
    modelZ: { type: ControlType.Number, title: "Model Z", defaultValue: 0 },
    modelScale: { type: ControlType.Number, title: "Model Scale", defaultValue: 2 },
    rotationSpeed: { type: ControlType.Number, title: "Rotation Speed" },
    rotationDirection: {
        type: ControlType.Enum,
        title: "Rotation Direction",
        options: [1, -1, 0],
        optionTitles: ["CCW", "CW", "None"],
    },
    ambientLightIntensity: {
        type: ControlType.Number,
        title: "Ambient Light",
        defaultValue: 1,
        min: 0,
        max: 3,
        step: 0.1,
    },
    directionalLightIntensity: {
        type: ControlType.Number,
        title: "Directional Light",
        defaultValue: 1,
        min: 0,
        max: 3,
        step: 0.1,
    },
    mobileQuality: {
        type: ControlType.Enum,
        title: "Mobile Quality",
        options: ["low", "medium", "high"],
        optionTitles: ["Low", "Medium", "High"],
        defaultValue: "medium"
    }
});
