// 4/8: desktop & mobile stable

import React, { useEffect, useRef, useState } from "react";
import { addPropertyControls, ControlType } from "framer";

const ThreeJSURL = "https://unpkg.com/three@0.136.0/build/three.min.js";
const GLTFLoaderURL = "https://unpkg.com/three@0.136.0/examples/js/loaders/GLTFLoader.js";
const OrbitControlsURL = "https://unpkg.com/three@0.136.0/examples/js/controls/OrbitControls.js";

// Shared WebGL context management
const MAX_WEBGL_CONTEXTS = 4;
const activeContexts = new Set();

// Global script loading
const scriptCache = new Map();
const loadScript = (url) => {
    if (scriptCache.has(url)) return scriptCache.get(url);
    const promise = new Promise((resolve, reject) => {
        const script = document.createElement("script");
        script.src = url;
        script.async = true;
        script.onload = () => resolve(true);
        script.onerror = () => reject(new Error(`Failed to load script: ${url}`));
        document.head.appendChild(script);
    });
    scriptCache.set(url, promise);
    return promise;
};

export default function ThreeDModel({
    glbUrl,
    cameraX = 0,
    cameraY = 0,
    cameraZ = 10,
    modelX = 0,
    modelY = 0,
    modelZ = 0,
    modelScale = 2,
    rotationSpeed = 0.01,
    rotationDirection = 1,
    ambientLightIntensity = 1,
    directionalLightIntensity = 1,
}) {
    const mountRef = useRef(null);
    const objectRef = useRef(null);
    const animationRef = useRef(null);
    const rendererRef = useRef(null);
    const sceneRef = useRef(null);
    const cameraRef = useRef(null);
    const controlsRef = useRef(null);
    const contextIdRef = useRef(null);
    const userInteracting = useRef(false);
    const lastInteractionTime = useRef(Date.now());
    const [isInViewport, setIsInViewport] = useState(true);
    const isMounted = useRef(true);
    
    // Rotation physics tracking
    const rotationVelocity = useRef(0);
    const targetRotationVelocity = useRef(rotationSpeed * rotationDirection);
    
    // Detect device
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    const isMobile = /Mobi|Android/i.test(navigator.userAgent) || isIOS;
    
    // Context management functions
    const registerContext = () => {
        const id = Date.now().toString();
        activeContexts.add(id);
        contextIdRef.current = id;
        return id;
    };
    
    const unregisterContext = () => {
        if (contextIdRef.current) {
            activeContexts.delete(contextIdRef.current);
            contextIdRef.current = null;
        }
    };
    
    const canCreateContext = () => {
        return activeContexts.size < MAX_WEBGL_CONTEXTS;
    };

    // Resource cleanup
    const cleanup = () => {
        isMounted.current = false;
        
        if (animationRef.current) {
            cancelAnimationFrame(animationRef.current);
            animationRef.current = null;
        }
        
        if (controlsRef.current) {
            controlsRef.current.dispose();
            controlsRef.current = null;
        }
        
        if (sceneRef.current && objectRef.current) {
            sceneRef.current.remove(objectRef.current);
            objectRef.current.traverse((node) => {
                if (node.isMesh) {
                    if (node.geometry) node.geometry.dispose();
                    if (node.material) {
                        if (Array.isArray(node.material)) {
                            node.material.forEach(mat => {
                                if (mat.map) mat.map.dispose();
                                mat.dispose();
                            });
                        } else {
                            if (node.material.map) node.material.map.dispose();
                            node.material.dispose();
                        }
                    }
                }
            });
            objectRef.current = null;
        }
        
        if (rendererRef.current) {
            rendererRef.current.dispose();
            rendererRef.current.forceContextLoss();
            rendererRef.current = null;
        }
        
        unregisterContext();
        sceneRef.current = null;
        cameraRef.current = null;
    };

    // Set up intersection observer
    useEffect(() => {
        const observer = new IntersectionObserver(
            (entries) => {
                setIsInViewport(entries[0].isIntersecting);
            },
            { threshold: 0.1 }
        );

        if (mountRef.current) observer.observe(mountRef.current);
        return () => {
            if (mountRef.current) observer.unobserve(mountRef.current);
        };
    }, []);

    // Main initialization
    useEffect(() => {
        if (!mountRef.current || !glbUrl) return;
        isMounted.current = true;
        
        if (!canCreateContext()) return;
        registerContext();

        // Clear container
        while (mountRef.current.firstChild) {
            mountRef.current.removeChild(mountRef.current.firstChild);
        }

        const loadModules = async () => {
            try {
                await Promise.all([
                    loadScript(ThreeJSURL),
                    loadScript(GLTFLoaderURL),
                    loadScript(OrbitControlsURL),
                ]);

                if (!isMounted.current) return;

                const THREE = window.THREE;
                const OrbitControls = window.THREE.OrbitControls || window.OrbitControls;
                const GLTFLoader = window.THREE.GLTFLoader || window.GLTFLoader;
                
                if (!THREE || !OrbitControls || !GLTFLoader) return;
                
                if (!THREE.OrbitControls) THREE.OrbitControls = OrbitControls;
                if (!THREE.GLTFLoader) THREE.GLTFLoader = GLTFLoader;

                // Create scene
                const scene = new THREE.Scene();
                scene.background = null;
                sceneRef.current = scene;

                // Setup camera
                const camera = new THREE.PerspectiveCamera(
                    50, 
                    mountRef.current.clientWidth / mountRef.current.clientHeight, 
                    0.1, 
                    1000
                );
                camera.position.set(0, 0, 5);
                cameraRef.current = camera;

                // Create renderer
                const renderer = new THREE.WebGLRenderer({ 
                    alpha: true, 
                    antialias: !isMobile,
                    precision: isMobile ? "mediump" : "highp"
                });
                renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
                renderer.setPixelRatio(isMobile ? Math.min(1.5, window.devicePixelRatio) : window.devicePixelRatio);
                
                // Create container
                const container = document.createElement('div');
                container.style.width = '100%';
                container.style.height = '100%';
                container.style.position = 'relative';
                container.style.touchAction = 'pan-y';
                
                renderer.domElement.style.position = 'absolute';
                renderer.domElement.style.top = '0';
                renderer.domElement.style.left = '0';
                renderer.domElement.style.width = '100%';
                renderer.domElement.style.height = '100%';
                
                // Different handling for mobile vs desktop
                if (isMobile) {
                    // On mobile, default to no pointer events to allow scrolling
                    renderer.domElement.style.pointerEvents = 'none';
                } else {
                    // On desktop, always enable pointer events for mouse interaction
                    renderer.domElement.style.pointerEvents = 'auto';
                }
                
                container.appendChild(renderer.domElement);
                mountRef.current.appendChild(container);
                rendererRef.current = renderer;

                // Add lighting
                const ambientLight = new THREE.AmbientLight(0xffffff, ambientLightIntensity);
                const dirLight = new THREE.DirectionalLight(0xffffff, directionalLightIntensity);
                dirLight.position.set(5, 10, 5);
                const fillLight = new THREE.DirectionalLight(0xffffff, directionalLightIntensity * 0.3);
                fillLight.position.set(-5, -5, -5);
                scene.add(ambientLight, dirLight, fillLight);

                // Initialize rotation velocity to match auto-rotation
                rotationVelocity.current = rotationSpeed * rotationDirection;
                targetRotationVelocity.current = rotationSpeed * rotationDirection;

                // For desktop, use OrbitControls for mouse interaction
                if (!isMobile) {
                    const controls = new THREE.OrbitControls(camera, renderer.domElement);
                    controls.enableDamping = true;
                    controls.dampingFactor = 0.05;
                    controls.enableZoom = false;
                    controls.enablePan = false;
                    controls.minPolarAngle = Math.PI / 2; // Restrict to horizontal rotation
                    controls.maxPolarAngle = Math.PI / 2; 
                    controls.rotateSpeed = 0.7;
                    
                    controls.addEventListener('start', () => {
                        userInteracting.current = true;
                    });
                    
                    controls.addEventListener('end', () => {
                        userInteracting.current = false;
                        lastInteractionTime.current = Date.now();
                    });
                    
                    controlsRef.current = controls;
                }
                
                // For mobile, handle touch events manually with smooth physics
                if (isMobile) {
                    // Variables for touch handling
                    let touchStartX = 0;
                    let touchStartY = 0;
                    let lastTouchX = 0;
                    let lastTouchTime = 0;
                    let isHorizontalMove = null;
                    
                    // Handle touch events
                    const handleTouchStart = (e) => {
                        if (e.touches.length !== 1) return;
                        
                        touchStartX = e.touches[0].clientX;
                        touchStartY = e.touches[0].clientY;
                        lastTouchX = touchStartX;
                        lastTouchTime = Date.now();
                        isHorizontalMove = null;
                        userInteracting.current = false;
                    };
                    
                    const handleTouchMove = (e) => {
                        if (e.touches.length !== 1) return;
                        
                        const currentX = e.touches[0].clientX;
                        const currentY = e.touches[0].clientY;
                        const deltaX = Math.abs(currentX - touchStartX);
                        const deltaY = Math.abs(currentY - touchStartY);
                        
                        // Determine direction if not already set
                        if (isHorizontalMove === null && (deltaX > 8 || deltaY > 8)) {
                            isHorizontalMove = deltaX > deltaY;
                            
                            if (isHorizontalMove) {
                                // Horizontal - enable rotation
                                renderer.domElement.style.pointerEvents = 'auto';
                                
                                if (e.cancelable) {
                                    e.preventDefault();
                                }
                                
                                userInteracting.current = true;
                            } else {
                                // Vertical - disable pointer events to allow page scrolling
                                renderer.domElement.style.pointerEvents = 'none';
                                userInteracting.current = false;
                            }
                        }
                        
                        // Handle horizontal rotation
                        if (isHorizontalMove === true) {
                            userInteracting.current = true;
                            lastInteractionTime.current = Date.now();
                            
                            if (e.cancelable) {
                                e.preventDefault();
                            }
                            
                            // Calculate touch movement speed for physics
                            const now = Date.now();
                            const dt = Math.max(1, now - lastTouchTime); // Avoid division by zero
                            
                            // Rotate the model and calculate velocity
                            if (objectRef.current) {
                                const moveAmount = currentX - lastTouchX;
                                const rotateAmount = moveAmount * 0.01;
                                objectRef.current.rotation.y += rotateAmount;
                                
                                // Calculate velocity in radians per millisecond, then convert to per-frame rate
                                // This is crucial for smooth transitions
                                rotationVelocity.current = (rotateAmount / dt) * 16.67; // Approximately 60fps
                            }
                            
                            lastTouchX = currentX;
                            lastTouchTime = now;
                        }
                    };
                    
                    const handleTouchEnd = () => {
                        // Reset pointer events to none to allow scrolling by default
                        renderer.domElement.style.pointerEvents = 'none';
                        
                        userInteracting.current = false;
                        lastInteractionTime.current = Date.now();
                    };
                    
                    // Add touch event listeners to container
                    container.addEventListener("touchstart", handleTouchStart, { passive: true });
                    container.addEventListener("touchmove", handleTouchMove, { passive: false });
                    container.addEventListener("touchend", handleTouchEnd, { passive: true });
                    
                    // Enable pointer events temporarily when touching container
                    container.addEventListener("pointerdown", () => {
                        if (isMobile) renderer.domElement.style.pointerEvents = 'auto';
                    }, { passive: true });
                }

                // Load model
                const loader = new THREE.GLTFLoader();
                loader.load(
                    glbUrl,
                    (gltf) => {
                        if (!isMounted.current) return;
                        
                        const model = gltf.scene;
                        
                        // Simple mobile optimizations without changing appearance
                        if (isMobile) {
                            model.traverse((node) => {
                                if (node.isMesh) {
                                    node.castShadow = false;
                                    node.receiveShadow = false;
                                    if (node.material) {
                                        if (Array.isArray(node.material)) {
                                            node.material.forEach(mat => {
                                                mat.precision = "mediump";
                                            });
                                        } else {
                                            node.material.precision = "mediump";
                                        }
                                    }
                                }
                            });
                        }
                        
                        model.scale.setScalar(modelScale);
                        model.position.set(modelX, modelY, modelZ);
                        scene.add(model);
                        objectRef.current = model;
                        
                        camera.lookAt(new THREE.Vector3(0, 0, 0));
                    },
                    undefined,
                    (err) => console.error("Error loading model:", err)
                );

                // Animation loop with smooth physics
                let lastTime = 0;
                
                const animate = (time) => {
                    if (!isMounted.current) return;
                    
                    animationRef.current = requestAnimationFrame(animate);
                    
                    const deltaTime = Math.min(0.05, (time - lastTime) / 1000);
                    lastTime = time;
                    
                    if (isInViewport && objectRef.current) {
                        // Update controls for desktop
                        if (!isMobile && controlsRef.current) {
                            controlsRef.current.update();
                        }
                        
                        // Handle rotation physics for both desktop and mobile
                        if (!userInteracting.current) {
                            const elapsed = (Date.now() - lastInteractionTime.current) / 1000;
                            
                            if (elapsed > 0.1) {
                                // Smooth damping transition to target velocity (similar to OrbitControls)
                                const dampingFactor = 0.92; // Adjust for more/less smoothness
                                const targetVelocity = rotationSpeed * rotationDirection;
                                
                                // Use damping to smoothly transition between current velocity and target
                                rotationVelocity.current = rotationVelocity.current * dampingFactor + 
                                                       targetVelocity * (1 - dampingFactor);
                            }
                            
                            // Apply the current rotation velocity
                            objectRef.current.rotation.y += rotationVelocity.current;
                        }
                        
                        renderer.render(scene, camera);
                    }
                };
                
                animate(0);

                // Handle resize
                const handleResize = () => {
                    if (!mountRef.current || !camera || !renderer) return;
                    
                    camera.aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
                };
                
                window.addEventListener('resize', handleResize);

                // Cleanup
                return () => {
                    if (isMobile) {
                        container.removeEventListener("touchstart", handleTouchStart);
                        container.removeEventListener("touchmove", handleTouchMove);
                        container.removeEventListener("touchend", handleTouchEnd);
                        container.removeEventListener("pointerdown", () => {
                            renderer.domElement.style.pointerEvents = 'auto';
                        });
                    }
                    
                    window.removeEventListener('resize', handleResize);
                    
                    cleanup();
                };
            } catch (e) {
                console.error("Scene initialization failed:", e);
                cleanup();
            }
        };

        loadModules();

        return () => cleanup();
    }, [glbUrl, modelX, modelY, modelZ, modelScale, rotationSpeed, rotationDirection, ambientLightIntensity, directionalLightIntensity]);

    return (
        <div 
            ref={mountRef} 
            style={{ 
                width: "100%", 
                height: "100%", 
                overflow: "visible",
                touchAction: "pan-y" 
            }} 
        />
    );
}

addPropertyControls(ThreeDModel, {
    glbUrl: { type: ControlType.String, title: "GLB URL" },
    cameraX: { type: ControlType.Number, title: "Camera X", defaultValue: 0 },
    cameraY: { type: ControlType.Number, title: "Camera Y", defaultValue: 0 },
    cameraZ: { type: ControlType.Number, title: "Camera Z", defaultValue: 10 },
    modelX: { type: ControlType.Number, title: "Model X", defaultValue: 0 },
    modelY: { type: ControlType.Number, title: "Model Y", defaultValue: 0 },
    modelZ: { type: ControlType.Number, title: "Model Z", defaultValue: 0 },
    modelScale: { type: ControlType.Number, title: "Model Scale", defaultValue: 2 },
    rotationSpeed: { type: ControlType.Number, title: "Rotation Speed" },
    rotationDirection: {
        type: ControlType.Enum,
        title: "Rotation Direction",
        options: [1, -1, 0],
        optionTitles: ["CCW", "CW", "None"],
    },
    ambientLightIntensity: {
        type: ControlType.Number,
        title: "Ambient Light",
        defaultValue: 1,
        min: 0,
        max: 3,
        step: 0.1,
    },
    directionalLightIntensity: {
        type: ControlType.Number,
        title: "Directional Light",
        defaultValue: 1,
        min: 0,
        max: 3,
        step: 0.1,
    },
});
