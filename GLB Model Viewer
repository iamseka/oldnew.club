import React, { useEffect, useRef } from "react";
import { addPropertyControls, ControlType } from "framer";

// CDN links
const ThreeJSURL = "https://unpkg.com/three@0.136.0/build/three.min.js";
const GLTFLoaderURL = "https://unpkg.com/three@0.136.0/examples/js/loaders/GLTFLoader.js";
const OrbitControlsURL = "https://unpkg.com/three@0.136.0/examples/js/controls/OrbitControls.js";

const loadScript = (url) => {
    return new Promise((resolve, reject) => {
        const script = document.createElement("script");
        script.src = url;
        script.async = true;
        script.onload = () => resolve(true);
        script.onerror = () => reject(new Error(`Failed to load script: ${url}`));
        document.head.appendChild(script);
    });
};

export default function ThreeDModel({
    glbUrl,
    cameraX = 0,
    cameraY = 0,
    cameraZ = 10,
    modelX = 0,
    modelY = 0,
    modelZ = 0,
    modelScale = 2,
    rotationSpeed = 0.01,
    rotationDirection = 1,
}) {
    const mountRef = useRef(null);
    const objectRef = useRef(null);
    const animationRef = useRef(null);
    const controlsRef = useRef(null);

    useEffect(() => {
        if (!mountRef.current || !glbUrl) {
            console.error("‚ùå Missing mount reference or GLB URL");
            return;
        }

        const loadModules = async () => {
            try {
                console.log("üîç Initializing Three.js Scene...");

                await loadScript(ThreeJSURL);
                const THREE = window.THREE;
                if (!THREE) throw new Error("THREE not found on window");
                console.log("‚úÖ Three.js Loaded");

                await loadScript(GLTFLoaderURL);
                await loadScript(OrbitControlsURL);

                const OrbitControls = window.THREE.OrbitControls || window.OrbitControls;
                const GLTFLoader = window.THREE.GLTFLoader || window.GLTFLoader;

                if (!OrbitControls || !GLTFLoader) {
                    throw new Error("‚ùå OrbitControls or GLTFLoader not found after script load");
                }

                if (!THREE.OrbitControls) THREE.OrbitControls = OrbitControls;
                if (!THREE.GLTFLoader) THREE.GLTFLoader = GLTFLoader;

                console.log("‚úÖ GLTFLoader and OrbitControls loaded");

                const scene = new THREE.Scene();
                scene.background = new THREE.Color(0xeeeeee); // Light gray background

                const camera = new THREE.PerspectiveCamera(
                    50,
                    mountRef.current.clientWidth / mountRef.current.clientHeight,
                    0.1,
                    1000
                );
                camera.position.set(cameraX, cameraY, cameraZ);

                const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
                renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
                renderer.setPixelRatio(window.devicePixelRatio);
                mountRef.current.appendChild(renderer.domElement);

                const controls = new THREE.OrbitControls(camera, renderer.domElement);
                controls.enableDamping = true;
                controlsRef.current = controls;

                scene.add(new THREE.AmbientLight(0xffffff, 0.5));
                const dirLight = new THREE.DirectionalLight(0xffffff, 0.5);
                dirLight.position.set(5, 10, 5);
                scene.add(dirLight);

                const axesHelper = new THREE.AxesHelper(5);
                scene.add(axesHelper);

                const loader = new THREE.GLTFLoader();
                loader.load(
                    glbUrl,
                    (gltf) => {
                        const model = gltf.scene;
                        console.log("üì¶ Loaded Model Details:", model);
                        console.log("üß± Children:", model.children);
                        model.traverse((child) => {
                            console.log("üîé Traversed Node:", child.name, child.type, child);
                        });

                        model.position.set(modelX, modelY, modelZ);
                        model.scale.set(modelScale, modelScale, modelScale);
                        scene.add(model);
                        objectRef.current = model;

                        // Auto-center camera on model
                        const box = new THREE.Box3().setFromObject(model);
                        const center = new THREE.Vector3();
                        const size = new THREE.Vector3();
                        box.getCenter(center);
                        box.getSize(size);
                        console.log("üìê Bounding Box Center:", center);
                        console.log("üìè Size:", size);

                        controls.target.copy(center);
                        camera.position.copy(center.clone().add(new THREE.Vector3(0, 0, size.z * 2.5)));
                        camera.lookAt(center);
                        controls.update();

                        console.log("‚úÖ Model Loaded");
                    },
                    undefined,
                    (err) => console.error("‚ùå Error loading model", err)
                );

                const animate = () => {
                    animationRef.current = requestAnimationFrame(animate);
                    if (objectRef.current) {
                        objectRef.current.rotation.y += rotationSpeed * rotationDirection;
                    }
                    controls.update();
                    renderer.render(scene, camera);
                };
                animate();
            } catch (e) {
                console.error("‚ùå Failed to initialize Three.js scene:", e);
            }
        };

        loadModules();

        return () => {
            cancelAnimationFrame(animationRef.current);
            if (mountRef.current?.firstChild) {
                mountRef.current.removeChild(mountRef.current.firstChild);
            }
        };
    }, [glbUrl, cameraX, cameraY, cameraZ, modelX, modelY, modelZ, modelScale, rotationSpeed, rotationDirection]);

    return <div ref={mountRef} style={{ width: "100%", height: "100%", overflow: "visible" }} />;
}

addPropertyControls(ThreeDModel, {
    glbUrl: { type: ControlType.String, title: "GLB URL" },
    cameraX: { type: ControlType.Number, title: "Camera X", defaultValue: 0 },
    cameraY: { type: ControlType.Number, title: "Camera Y", defaultValue: 0 },
    cameraZ: { type: ControlType.Number, title: "Camera Z", defaultValue: 10 },
    modelX: { type: ControlType.Number, title: "Model X", defaultValue: 0 },
    modelY: { type: ControlType.Number, title: "Model Y", defaultValue: 0 },
    modelZ: { type: ControlType.Number, title: "Model Z", defaultValue: 0 },
    modelScale: { type: ControlType.Number, title: "Model Scale", defaultValue: 2 },
    rotationSpeed: { type: ControlType.Number, title: "Rotation Speed" },
    rotationDirection: {
        type: ControlType.Enum,
        title: "Rotation Direction",
        options: [1, -1, 0],
        optionTitles: ["CCW", "CW", "0"],
    },
});


// **üìù Notes:**
// 3/21 new stable: shared unframer project on github with chat and it noticably adapted to match my problem solving effort
// issues: (1) remove the background,
// (2) fix lighting,
// (3) reduce interactions to soft horizontal orbit,
// (4) fix mouseUp orbiting,
// (5) create consistent model scale and position
